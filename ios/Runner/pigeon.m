// Autogenerated from Pigeon (v1.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}


@interface Api2HostCodecReader : FlutterStandardReader
@end
@implementation Api2HostCodecReader
@end

@interface Api2HostCodecWriter : FlutterStandardWriter
@end
@implementation Api2HostCodecWriter
@end

@interface Api2HostCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation Api2HostCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[Api2HostCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[Api2HostCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *Api2HostGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    Api2HostCodecReaderWriter *readerWriter = [[Api2HostCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void Api2HostSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<Api2Host> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api2Host.init"
        binaryMessenger:binaryMessenger
        codec:Api2HostGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initUrls:completion:)], @"Api2Host api doesn't respond to @selector(initUrls:completion:)");
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_urls = args[0];
        [api initUrls:arg_urls completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
